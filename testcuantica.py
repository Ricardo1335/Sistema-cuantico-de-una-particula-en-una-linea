import unittest
import cuantica as pr

class TestStringMethods(unittest.TestCase):

    def test_amplitudTrancision(self):
      a = [[2,1],[-1,2],[0,1],[1,0],[3,-1],[2,0],[0,-2],[-2,1],[1,-3],[0,-1]]
      b = [[-1,-4],[2,-3],[-7,6],[-1,1],[-5,-3],[5,0],[5,8],[4,-4],[8,-7],[2,-7]]
      c = [[[2,0],[1,1]],[[1,-1],[3,0]]]
      d = [[1/(2**.5),0],[0,1/(2**0.5)]]
      self.assertEqual(pr.amplituddetransicion(a,b), (-0.02, -0.13))

    def test_probabilidad(self):
     a = [[2,1],[-1,2],[0,1],[1,0],[3,-1],[2,0],[0,-2],[-2,1],[1,-3],[0,-1]]
     b = [[-1,-4],[2,-3],[-7,6],[-1,1],[-5,-3],[5,0],[5,8],[4,-4],[8,-7],[2,-7]]
     c = [[[2,0],[1,1]],[[1,-1],[3,0]]]
     d = [[1/(2**.5),0],[0,1/(2**0.5)]]
     self.assertEqual(pr.probabilidad(a,7), 10.87)
            
    def test_valorEsperado(self):
      a = [[2,1],[-1,2],[0,1],[1,0],[3,-1],[2,0],[0,-2],[-2,1],[1,-3],[0,-1]]
      b = [[-1,-4],[2,-3],[-7,6],[-1,1],[-5,-3],[5,0],[5,8],[4,-4],[8,-7],[2,-7]]
      c = [[[2,0],[1,1]],[[1,-1],[3,0]]]
      d = [[1/(2**.5),0],[0,1/(2**0.5)]]
      self.assertEqual(pr.valoresperado(d,c), (1.5, 0.0))
        
if __name__ == '__main__':
    unittest.main()
